datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  email       String        @unique
  password    String
  phoneNumber String
  otp         String
  name        String
  address     String
  points      Int
  kycStatus   String
  scannedCodes String[]
  notifications Notification[]
  pointsRecords Points[]
  qrCodes QR[]
  supportTickets SupportTicket[]
  refreshTokens RefreshToken[]
  firebaseUid String        @unique
  profile     Profile?
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId @unique
  user      User     @relation(fields: [userId], references: [id])
  firstName String
  lastName  String
  email     String
}

// Existing models should be preserved here
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Points {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  points    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  createdAt   DateTime @default(now())
}

model QR {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Reward {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  pointsRequired Int
  createdAt   DateTime @default(now())
}

model SupportTicket {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  subject   String
  message   String
  status    String   @default("open")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
